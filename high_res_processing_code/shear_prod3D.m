% Calculate shear_prod3D.f90 for the tke/tkz calculation
 % Step 02:05:Calculate shear_prod3D.f90 for the tke/tkz calculation
 function def2=shear_prod3D(u,v,w,dx,dy,dz,adz,adzw,num_x,num_y,num_z,ravefactor)
        YES3D = 1;
        dx_tmp=dx/ravefactor;%Need to check if necessary
        dy_tmp=dy/ravefactor;
        w=w*ravefactor;
        nzm = num_z;
        ny = num_y;
        nx = num_x;
        rdx0=1./dx_tmp;
        rdy0=1./dy_tmp;
        u0 = mean(mean(u,2),3);
        v0 = mean(mean(v,2),3);
        v_bound = zeros([size(v,1),size(v,2)+2,size(v,3)+2]);
        u_bound = zeros([size(v,1),size(v,2)+2,size(v,3)+2]);
        w_bound = zeros([size(v,1)+1,size(v,2)+2,size(v,3)+2]);
        
        v_bound(:,2:end-1,2:end-1) = v;
        u_bound(:,2:end-1,2:end-1) = u;
        w_bound(1:end-1,2:end-1,2:end-1) = w;
        %
        % v_bound(:,1,:) = 0;
        % v_bound(:,end,:) = 0;
        v_bound(:,2:end-1,1) = v(:,:,end-1);
        v_bound(:,2:end-1,end) = v(:,:,2);
        
        u_bound(:,2:end-1,1) = u(:,:,end-1);
        u_bound(:,2:end-1,end) = u(:,:,2);
        
        w_bound(1:end-1,2:end-1,1) = w(:,:,end-1);
        w_bound(1:end-1,2:end-1,end) = w(:,:,2);
        
        def2 = zeros(size(v));
        
        u_bound = permute(u_bound,[3,2,1]);
        v_bound = permute(v_bound,[3,2,1]);
        w_bound = permute(w_bound,[3,2,1]);
        def2 = permute(def2,[3,2,1]);
        
        
        
        for k=2:nzm-1
            
            kb=k-1;
            kc=k+1;
            rdz = 1./(dz*adz(k));
            rdzw_up = 1./(dz*adzw(kc));
            rdzw_dn = 1./(dz*adzw(k));
            rdx=rdx0 * sqrt(dx_tmp*rdz);% ! take into account grid anisotropy
            rdy=rdy0 * sqrt(dy_tmp*rdz);
            rdx_up=rdx0 * sqrt(dx_tmp*rdzw_up);
            rdy_up=rdy0 * sqrt(dy_tmp*rdzw_up);
            rdx_dn=rdx0 * sqrt(dx_tmp*rdzw_dn);
            rdy_dn=rdy0 * sqrt(dy_tmp*rdzw_dn);
            
            for j=2:ny+1
                jb=j-YES3D;
                jc=j+YES3D;
                for i=2:nx+1
                    ib=i-1;
                    ic=i+1;
                    
                    def2(i-1,j-1,k)=2.* ( ...
                        ( (u_bound(ic,j,k)-u_bound(i,j,k))*rdx)^2+ ...
                        ( (v_bound(i,jc,k)-v_bound(i,j,k))*rdy)^2+ ...
                        ( (w_bound(i,j,kc)-w_bound(i,j,k))*rdz)^2 ) ...
                        + 0.25 * ( ...
                        ( (u_bound(ic,jc,k)-u_bound(ic,j ,k))*rdy+(v_bound(ic,jc,k)-v_bound(i ,jc,k))*rdx )^2 +  ...
                        ( (u_bound(i ,jc,k)-u_bound(i ,j ,k))*rdy+(v_bound(i ,jc,k)-v_bound(ib,jc,k))*rdx )^2 +  ...
                        ( (u_bound(ic,j ,k)-u_bound(ic,jb,k))*rdy+(v_bound(ic,j ,k)-v_bound(i ,j ,k))*rdx )^2 +  ...
                        ( (u_bound(i ,j ,k)-u_bound(i ,jb,k))*rdy+(v_bound(i ,j ,k)-v_bound(ib,j ,k))*rdx )^2 );
                    def2(i-1,j-1,k)=def2(i-1,j-1,k) ...
                        + 0.25 * ( ...
                        ( (u_bound(ic,j,kc)-u0(kc)-u_bound(ic,j, k)+u0(k))*rdzw_up+ ...
                        (w_bound(ic,j,kc)-w_bound(i ,j,kc))*rdx_up )^2 + ...
                        ( (u_bound(i ,j,kc)-u0(kc)-u_bound(i ,j, k)+u0(k))*rdzw_up+ ...
                        (w_bound(i ,j,kc)-w_bound(ib,j,kc))*rdx_up )^2 + ...
                        ( (u_bound(ic,j,k )-u0(k)-u_bound(ic,j,kb)+u0(kb))*rdzw_dn+ ...
                        (w_bound(ic,j,k )-w_bound(i ,j,k ))*rdx_dn )^2 + ...
                        ( (u_bound(i ,j,k )-u0(k)-u_bound(i ,j,kb)+u0(kb))*rdzw_dn+ ...
                        (w_bound(i ,j,k )-w_bound(ib,j,k ))*rdx_dn )^2 );
                    def2(i-1,j-1,k)=def2(i-1,j-1,k) ...
                        + 0.25 * ( ...
                        ( (v_bound(i,jc,kc)-v0(kc)-v_bound(i,jc, k)+v0(k))*rdzw_up+ ...
                        (w_bound(i,jc,kc)-w_bound(i,j ,kc))*rdy_up )^2 + ...
                        ( (v_bound(i,j ,kc)-v0(kc)-v_bound(i,j , k)+v0(k))*rdzw_up+ ...
                        (w_bound(i,j ,kc)-w_bound(i,jb,kc))*rdy_up )^2 + ...
                        ( (v_bound(i,jc,k )-v0(k)-v_bound(i,jc,kb)+v0(kb))*rdzw_dn+ ...
                        (w_bound(i,jc,k )-w_bound(i,j ,k ))*rdy_dn )^2 + ...
                        ( (v_bound(i,j ,k )-v0(k)-v_bound(i,j ,kb)+v0(kb))*rdzw_dn+ ...
                        (w_bound(i,j ,k )-w_bound(i,jb,k ))*rdy_dn )^2 );
                    
                end
            end
        end
        
        
        k=1;
        kc=k+1;
        
        rdz = 1./(dz*adz(k));
        rdzw_up = 1./(dz*adzw(kc));
        rdx=rdx0 * sqrt(dx_tmp*rdz); %! take into account grid anisotropy
        rdy=rdy0 * sqrt(dy_tmp*rdz);
        rdx_up=rdx0 * sqrt(dx_tmp*rdzw_up);
        rdy_up=rdy0 * sqrt(dy_tmp*rdzw_up);
        
        for j=2:ny+1
            jb=j-YES3D;
            jc=j+YES3D;
            for i=2:nx+1
                ib=i-1;
                ic=i+1;
                
                def2(i-1,j-1,k)=2.* ( ...
                    ( (u_bound(ic,j,k)-u_bound(i,j,k))*rdx)^2+ ...
                    ( (v_bound(i,jc,k)-v_bound(i,j,k))*rdy)^2+ ...
                    ( (w_bound(i,j,kc)-w_bound(i,j,k))*rdz)^2 ) ...
                    + 0.25 * ( ...
                    ( (u_bound(ic,jc,k)-u_bound(ic,j ,k))*rdy+(v_bound(ic,jc,k)-v_bound(i ,jc,k))*rdx )^2 +  ...
                    ( (u_bound(i ,jc,k)-u_bound(i ,j ,k))*rdy+(v_bound(i ,jc,k)-v_bound(ib,jc,k))*rdx )^2 +  ...
                    ( (u_bound(ic,j ,k)-u_bound(ic,jb,k))*rdy+(v_bound(ic,j ,k)-v_bound(i ,j ,k))*rdx )^2 +  ...
                    ( (u_bound(i ,j ,k)-u_bound(i ,jb,k))*rdy+(v_bound(i ,j ,k)-v_bound(ib,j ,k))*rdx )^2 )   ...
                    + 0.5 * ( ...
                    ( (v_bound(i,jc,kc)-v0(kc)-v_bound(i,jc, k)+v0(k))*rdzw_up+ ...
                    (w_bound(i,jc,kc)-w_bound(i,j ,kc))*rdy_up )^2 + ...
                    ( (v_bound(i,j ,kc)-v0(kc)-v_bound(i,j , k)+v0(k))*rdzw_up+ ...
                    (w_bound(i,j ,kc)-w_bound(i,jb,kc))*rdy_up )^2 ) ...
                    + 0.5 * ( ...
                    ( (u_bound(ic,j,kc)-u0(kc)-u_bound(ic,j, k)+u0(k))*rdzw_up+ ...
                    (w_bound(ic,j,kc)-w_bound(i ,j,kc))*rdx_up )^2 + ...
                    ( (u_bound(i ,j,kc)-u0(kc)-u_bound(i ,j, k)+u0(k))*rdzw_up+ ...
                    (w_bound(i ,j,kc)-w_bound(ib,j,kc))*rdx_up )^2 );
                
                
            end
        end
        
        k=nzm;
        kc=k+1;
        kb=k-1;
        
        rdz = 1./(dz*adz(k));
        rdzw_dn = 1./(dz*adzw(k));
        rdx=rdx0 * sqrt(dx_tmp*rdz); %! take into account grid anisotropy
        rdy=rdy0 * sqrt(dy_tmp*rdz);
        rdx_dn=rdx0 * sqrt(dx_tmp*rdzw_dn);
        rdy_dn=rdy0 * sqrt(dy_tmp*rdzw_dn);
        
        for j=2:ny+1
            jb=j-1*YES3D;
            jc=j+1*YES3D;
            for i=2:nx+1
                ib=i-1;
                ic=i+1;
                def2(i-1,j-1,k)=2.* ( ...
                    ( (u_bound(ic,j,k)-u_bound(i,j,k))*rdx)^2+ ...
                    ( (v_bound(i,jc,k)-v_bound(i,j,k))*rdy)^2+ ...
                    ( (w_bound(i,j,kc)-w_bound(i,j,k))*rdz)^2 ) ...
                    + 0.25 * ( ...
                    ( (u_bound(ic,jc,k)-u_bound(ic,j ,k))*rdy+(v_bound(ic,jc,k)-v_bound(i ,jc,k))*rdx )^2 +  ...
                    ( (u_bound(i ,jc,k)-u_bound(i ,j ,k))*rdy+(v_bound(i ,jc,k)-v_bound(ib,jc,k))*rdx )^2 +  ...
                    ( (u_bound(ic,j ,k)-u_bound(ic,jb,k))*rdy+(v_bound(ic,j ,k)-v_bound(i ,j ,k))*rdx )^2 +  ...
                    ( (u_bound(i ,j ,k)-u_bound(i ,jb,k))*rdy+(v_bound(i ,j ,k)-v_bound(ib,j ,k))*rdx )^2 )   ...
                    + 0.5 * ( ...
                    ( (v_bound(i,jc,k )-v0(k)-v_bound(i,jc,kb)+v0(kb))*rdzw_dn+ ...
                    (w_bound(i,jc,k )-w_bound(i,j ,k ))*rdy_dn )^2 + ...
                    ( (v_bound(i,j ,k )-v0(k)-v_bound(i,j ,kb)+v0(kb))*rdzw_dn+ ...
                    (w_bound(i,j ,k )-w_bound(i,jb,k ))*rdy_dn )^2 ) ...
                    + 0.5 * ( ...
                    ( (u_bound(ic,j,k )-u0(k)-u_bound(ic,j,kb)+u0(kb))*rdzw_dn+ ...
                    (w_bound(ic,j,k )-w_bound(i ,j,k ))*rdx_dn )^2 + ...
                    ( (u_bound(i ,j,k )-u0(k)-u_bound(i ,j,kb)+u0(kb))*rdzw_dn+ ...
                    (w_bound(i ,j,k )-w_bound(ib,j,k ))*rdx_dn )^2 );
            end
        end
        % scale back
        %         dx=dx*ravefactor;
        %         dy=dy*ravefactor;
%         w=w/ravefactor;
        def2 = permute(def2,[3,2,1]);
 end
        